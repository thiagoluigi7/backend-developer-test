service: backend-developer-test

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, 'offline'}
  region: ${opt:region, 'us-east-1'}

  prismaEngine:
    offline: "node_modules/.prisma/client/*.node"
    staging: "node_modules/.prisma/client/libquery_engine-rhel*"
    prod: "node_modules/.prisma/client/libquery_engine-rhel*"

  esbuild:
    platform: "node"
    target: node16
    sourcemap: linked
    format: esm
    banner: # Used because serverless-esbuild does not support ESM/ES Modules https://github.com/floydspace/serverless-esbuild/issues/483#issuecomment-1718837093
      js: import { createRequire } from 'module';const require = (await import('node:module')).createRequire(import.meta.url);const __filename = (await import('node:url')).fileURLToPath(import.meta.url);const __dirname = (await import('node:path')).dirname(__filename);

  serverless-offline:
    httpPort: 4000
    noPrependStageInUrl: true
    reloadHandler: true

provider:
  name: aws
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs16.x
  memorySize: 512
  timeout: 10
  logRetentionInDays: 90
  logs:
    httpApi: true
  httpApi:
    # metrics: true # Enable if you need
    cors: true

functions:
  app:
    handler: src/functions/handler.handler
    # reservedConcurrency: 100
    events:
      - httpApi:
          path: "/{proxy+}"
          method: "*"

package:
  patterns:
    - "!**/*.test.ts"
    - ${self:custom.prismaEngine.${self:custom.stage}}
    - "node_modules/.prisma/client/schema.prisma"
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-offline
